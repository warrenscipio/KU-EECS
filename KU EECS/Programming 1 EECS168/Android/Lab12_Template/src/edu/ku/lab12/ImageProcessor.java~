package edu.ku.lab13;

import java.io.File;

import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;

import edu.ku.swingemu.AndroidJApplet;

public class ImageProcessor extends AndroidJApplet {

	public static final String EXTRA_FILE = "extra_file";
	
	File pgmFile;
	Bitmap bitmap;
	int[][] colors;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		pgmFile = (File) getIntent().getExtras().getSerializable(EXTRA_FILE);
		colors = createArrayFromPGM(pgmFile.getAbsolutePath());
		bitmap = createBitmapFromColorArray();
	}
	
	// Given the absolute file name of a PGM image, this routine should
	// return a multidimensional array containing an image to display on the screen.
	// The first dimension should be height (vertical), and the second should be width (horizontal).
	// Color values should range from 0 to 255, just like they do in the PGM image.
	private int[][] createArrayFromPGM(String filename){
		int[][] image = null;
		
		//TODO open the file and create a color array from the values in the file
		
		return image;
	}
		
	//---------------------------------------------------------------------------------------------------//
	// Image Processing
	void onPhotonegative() {

	}
	
	void onPosterize() {

	}
	
	void onEmboss() {

	}
	
	void onBlur() {

	}
	
	
	
	//---------------------------------------------------------------------------------------------------//
	/**
	 * Creates a grayscale bitmap given an array of integers representing a value of luminosity ranging between 0 and 255.
	 * The array should be allocated with width as the first dimension.
	 * int[width][height]
	 * @param colors - values between 0 and 255
	 * @return
	 */
	private Bitmap createBitmapFromColorArray(){
		if(colors == null) return null;
		Bitmap bm = Bitmap.createBitmap(colors.length, colors[0].length, Bitmap.Config.ARGB_8888);
		int curColor;
		for(int row = 0; row < bm.getHeight(); row++){
			for(int col = 0; col < bm.getWidth(); col++){
				curColor = colors[col][row];
				bm.setPixel(col, row, Color.rgb(curColor, curColor, curColor));
			}
		}
		repaint();
		return bm;
	}

	@Override
	public void paint(Graphics canvas) {
		canvas.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
		if(bitmap != null) canvas.setBitmap(bitmap, 0, 0);
	}

	
	
	//---------------------------------------------------------------------------------------------------//
	// Handle menu options
	private static final int MENU_NEG       = Menu.FIRST;
	private static final int MENU_POSTERIZE = Menu.FIRST + 1;
	private static final int MENU_BLUR      = Menu.FIRST + 2;
	private static final int MENU_EMBOSS    = Menu.FIRST + 3;
	private static final int MENU_JPEG      = Menu.FIRST + 4;
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(0, MENU_NEG,       0, "Photonegative").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
		menu.add(0, MENU_POSTERIZE, 1, "Posterize").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
		menu.add(0, MENU_BLUR,      2, "Blur").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
		menu.add(0, MENU_EMBOSS,    3, "Emboss").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
		menu.add(0, MENU_JPEG,      4, "Save").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		if (item.getItemId() == MENU_NEG) {
			onPhotonegative();
			bitmap = createBitmapFromColorArray();
		}
		
		if (item.getItemId() == MENU_POSTERIZE) {
			onPosterize();
			bitmap = createBitmapFromColorArray();
		}
		
		if (item.getItemId() == MENU_BLUR) {
			onBlur();
			bitmap = createBitmapFromColorArray();
		}
		
		if (item.getItemId() == MENU_EMBOSS) {
			onEmboss();
			bitmap = createBitmapFromColorArray();
		}
		
		if (item.getItemId() == MENU_JPEG) {
			onSave();
		}
		
		return super.onOptionsItemSelected(item);
	}
	
	private void onSave() {
		saveScreenToJPG("myscreen");
	}
}
